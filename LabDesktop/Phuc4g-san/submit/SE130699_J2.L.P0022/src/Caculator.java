/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.util.Stack;

/**
 *
 * @author Ngo Nhat Toan
 */
public class Caculator extends javax.swing.JFrame {

    /**
     * Creates new form Caculator
     */
    double operand = 0;
    String operanOnCaculator = "";
    double Result = 0;
    Stack<Double> stackOperand;
    Stack<Character> stackOperater;
    double Memory = 0;

    public Caculator() {
        initComponents();
        stackOperand = new Stack<>();
        stackOperater = new Stack<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnMS = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        buttonsPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lbOnCaculator = new javax.swing.JLabel();
        btnMC = new javax.swing.JButton();
        btnMR = new javax.swing.JButton();
        btnMAdd = new javax.swing.JButton();
        btnMSubtract = new javax.swing.JButton();
        btnDeleteAll = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnChangeAddorSubtract = new javax.swing.JButton();
        btnSquare = new javax.swing.JButton();
        btn7 = new javax.swing.JButton();
        btn8 = new javax.swing.JButton();
        btn9 = new javax.swing.JButton();
        btnDivide = new javax.swing.JButton();
        btnDevide100 = new javax.swing.JButton();
        btn4 = new javax.swing.JButton();
        btn5 = new javax.swing.JButton();
        btn6 = new javax.swing.JButton();
        btnMultiple = new javax.swing.JButton();
        btn1DivideX = new javax.swing.JButton();
        btn1 = new javax.swing.JButton();
        btn2 = new javax.swing.JButton();
        btn3 = new javax.swing.JButton();
        btnSubtract = new javax.swing.JButton();
        btn0 = new javax.swing.JButton();
        btnDot = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnEqual = new javax.swing.JButton();

        btnMS.setText("MS");
        btnMS.setEnabled(false);

        jButton6.setText("<-");
        jButton6.setEnabled(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        lbOnCaculator.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lbOnCaculator.setText("0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbOnCaculator)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(lbOnCaculator))
        );

        btnMC.setText("MC");
        btnMC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMCActionPerformed(evt);
            }
        });

        btnMR.setText("MR");
        btnMR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMRActionPerformed(evt);
            }
        });

        btnMAdd.setText("M+");
        btnMAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMAddActionPerformed(evt);
            }
        });

        btnMSubtract.setText("M-");
        btnMSubtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMSubtractActionPerformed(evt);
            }
        });

        btnDeleteAll.setText("CE");
        btnDeleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAllActionPerformed(evt);
            }
        });

        btnDelete.setText("C");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnChangeAddorSubtract.setText("±");
        btnChangeAddorSubtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeAddorSubtractActionPerformed(evt);
            }
        });

        btnSquare.setText("√");
        btnSquare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSquareActionPerformed(evt);
            }
        });

        btn7.setText("7");
        btn7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn7ActionPerformed(evt);
            }
        });

        btn8.setText("8");
        btn8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn8ActionPerformed(evt);
            }
        });

        btn9.setText("9");
        btn9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn9ActionPerformed(evt);
            }
        });

        btnDivide.setText("/");
        btnDivide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDivideActionPerformed(evt);
            }
        });

        btnDevide100.setText("%");
        btnDevide100.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDevide100ActionPerformed(evt);
            }
        });

        btn4.setText("4");
        btn4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn4ActionPerformed(evt);
            }
        });

        btn5.setText("5");
        btn5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn5ActionPerformed(evt);
            }
        });

        btn6.setText("6");
        btn6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn6ActionPerformed(evt);
            }
        });

        btnMultiple.setText("*");
        btnMultiple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMultipleActionPerformed(evt);
            }
        });

        btn1DivideX.setText("1/x");
        btn1DivideX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn1DivideXActionPerformed(evt);
            }
        });

        btn1.setText("1");
        btn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn1ActionPerformed(evt);
            }
        });

        btn2.setText("2");
        btn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn2ActionPerformed(evt);
            }
        });

        btn3.setText("3");
        btn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn3ActionPerformed(evt);
            }
        });

        btnSubtract.setText("-");
        btnSubtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubtractActionPerformed(evt);
            }
        });

        btn0.setText("0");
        btn0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn0ActionPerformed(evt);
            }
        });

        btnDot.setText(".");
        btnDot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDotActionPerformed(evt);
            }
        });

        btnAdd.setText("+");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEqual.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnEqual.setText("=");
        btnEqual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEqualActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonsPanelLayout = new javax.swing.GroupLayout(buttonsPanel);
        buttonsPanel.setLayout(buttonsPanelLayout);
        buttonsPanelLayout.setHorizontalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(buttonsPanelLayout.createSequentialGroup()
                .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buttonsPanelLayout.createSequentialGroup()
                        .addComponent(btn0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)))
                    .addGroup(buttonsPanelLayout.createSequentialGroup()
                        .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btn1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                            .addComponent(btn4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnDeleteAll, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                                .addComponent(btn8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(btnMC))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnMAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnChangeAddorSubtract, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDivide, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnMultiple, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSubtract, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn1DivideX, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDevide100, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSquare, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnMSubtract, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEqual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        buttonsPanelLayout.setVerticalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPanelLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMC)
                    .addComponent(btnMR)
                    .addComponent(btnMAdd)
                    .addComponent(btnMSubtract))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteAll, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete)
                    .addComponent(btnChangeAddorSubtract)
                    .addComponent(btnSquare))
                .addGap(18, 18, 18)
                .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn7)
                    .addComponent(btn8)
                    .addComponent(btn9)
                    .addComponent(btnDivide)
                    .addComponent(btnDevide100))
                .addGap(18, 18, 18)
                .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn4)
                    .addComponent(btn5)
                    .addComponent(btn6)
                    .addComponent(btnMultiple)
                    .addComponent(btn1DivideX))
                .addGap(18, 18, 18)
                .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(buttonsPanelLayout.createSequentialGroup()
                        .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn1)
                            .addComponent(btn2)
                            .addComponent(btn3)
                            .addComponent(btnSubtract))
                        .addGap(18, 18, 18)
                        .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn0)
                            .addComponent(btnDot)
                            .addComponent(btnAdd)))
                    .addComponent(btnEqual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn0ActionPerformed
        // TODO add your handling code here:
        operanOnCaculator += "0";
        lbOnCaculator.setText(operanOnCaculator);
        clearStack();

    }//GEN-LAST:event_btn0ActionPerformed

    private void btn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn1ActionPerformed
        // TODO add your handling code here:
        operanOnCaculator += "1";
        lbOnCaculator.setText(operanOnCaculator);
        clearStack();
    }//GEN-LAST:event_btn1ActionPerformed

    private void btn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn2ActionPerformed
        // TODO add your handling code here:
        operanOnCaculator += "2";
        lbOnCaculator.setText(operanOnCaculator);
        clearStack();
    }//GEN-LAST:event_btn2ActionPerformed

    private void btn3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn3ActionPerformed
        // TODO add your handling code here:
        operanOnCaculator += "3";
        lbOnCaculator.setText(operanOnCaculator);
        clearStack();
    }//GEN-LAST:event_btn3ActionPerformed

    private void btn4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn4ActionPerformed
        // TODO add your handling code here:
        operanOnCaculator += "4";
        lbOnCaculator.setText(operanOnCaculator);
        clearStack();
    }//GEN-LAST:event_btn4ActionPerformed

    private void btn5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn5ActionPerformed
        // TODO add your handling code here:
        operanOnCaculator += "5";
        lbOnCaculator.setText(operanOnCaculator);
        clearStack();
    }//GEN-LAST:event_btn5ActionPerformed

    private void btn6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn6ActionPerformed
        // TODO add your handling code here:
        operanOnCaculator += "6";
        lbOnCaculator.setText(operanOnCaculator);
        clearStack();
    }//GEN-LAST:event_btn6ActionPerformed

    private void btn7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn7ActionPerformed
        // TODO add your handling code here:
        operanOnCaculator += "7";
        lbOnCaculator.setText(operanOnCaculator);
        clearStack();
    }//GEN-LAST:event_btn7ActionPerformed

    private void btn8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn8ActionPerformed
        // TODO add your handling code here:
        operanOnCaculator += "8";
        lbOnCaculator.setText(operanOnCaculator);
        clearStack();
    }//GEN-LAST:event_btn8ActionPerformed

    private void btn9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn9ActionPerformed
        // TODO add your handling code here:
        operanOnCaculator += "9";
        lbOnCaculator.setText(operanOnCaculator);
        clearStack();
    }//GEN-LAST:event_btn9ActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        if (stackOperater.isEmpty()) {
            try {
                operand = Double.parseDouble(lbOnCaculator.getText());
                stackOperand.push(operand);
            } catch (Exception e) {
                lbOnCaculator.setText("Error");//when user click . +
                return;
            }
            
        } else {
            if (stackOperater.peek() != '=') {
                if (operanOnCaculator.length() > 0) { // when user click +-+-
                    operand = Double.parseDouble(lbOnCaculator.getText());
                    stackOperand.push(operand);
                }
            } else {
                if (stackOperand.size() >= 2) { // if stack oprand size = 1 (user click a number then click =    )
                    stackOperand.pop();
                }
                stackOperater.clear();
            }
        } // when user click = , then click + - * /
        if (stackOperand.size() == 3 && stackOperater.size() == 2) {
            try {
                double temp = caculate(stackOperand.get(1), stackOperand.get(2), stackOperater.get(1));
                stackOperand.pop();
                stackOperand.pop();
                stackOperand.push(temp);
                stackOperater.pop();
            } catch (Exception e) {
                lbOnCaculator.setText("Error");
                return;
            }

        }
        if (stackOperand.size() == 2 && stackOperater.size() == 1) {
            try {
                Result = caculate(stackOperand.get(0), stackOperand.get(1), stackOperater.get(0));
                stackOperand.clear();
                stackOperand.push(Result);
                stackOperater.clear();
                stackOperater.push('+');
                lbOnCaculator.setText(Result + "");
            } catch (Exception e) {
                lbOnCaculator.setText("Error");
                return;
            }
        }
//        else {
//            if (stackOperand.size() >= 2) {
//                stackOperand.pop();
//            }
//            stackOperater.push('+');
//        }
//        operanOnCaculator = "";
        else {
            stackOperater.clear();
            stackOperater.push('+');
        }
        operanOnCaculator = "";
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSubtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubtractActionPerformed
        // TODO add your handling code here:
        if (stackOperater.isEmpty()) {
            try {
                operand = Double.parseDouble(lbOnCaculator.getText());
                stackOperand.push(operand);
            } catch (Exception e) {
                lbOnCaculator.setText("Error");//when user click . +
                return;
            }
        } else {
            if (stackOperater.peek() != '=') {
                if (operanOnCaculator.length() > 0) {
                    operand = Double.parseDouble(lbOnCaculator.getText());
                    stackOperand.push(operand);
                }
            } else {
                if (stackOperand.size() >= 2) { // if stack oprand size = 1 (user click a number then click = 
                    stackOperand.pop();
                }
                stackOperater.clear();
            }
        }
        if (stackOperand.size() == 3 && stackOperater.size() == 2) {
            try {
                double temp = caculate(stackOperand.get(1), stackOperand.get(2), stackOperater.get(1));
                stackOperand.pop();
                stackOperand.pop();
                stackOperand.push(temp);
                stackOperater.pop();
            } catch (Exception e) {
                lbOnCaculator.setText("Error");
                return;
            }

        }
        if (stackOperand.size() == 2 && stackOperater.size() == 1) {
            try {
                Result = caculate(stackOperand.get(0), stackOperand.get(1), stackOperater.get(0));
                stackOperand.clear();
                stackOperand.push(Result);
                stackOperater.clear();
                stackOperater.push('-');
                lbOnCaculator.setText(Result + "");
            } catch (Exception e) {
                lbOnCaculator.setText("Error");
                return;
            }

        } else {
            stackOperater.clear();
            stackOperater.push('-');
        }
        operanOnCaculator = "";
    }//GEN-LAST:event_btnSubtractActionPerformed

    private void btnMultipleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMultipleActionPerformed
        // TODO add your handling code here:
        if (stackOperater.isEmpty()) {
           try {
                operand = Double.parseDouble(lbOnCaculator.getText());
                stackOperand.push(operand);
            } catch (Exception e) {
                lbOnCaculator.setText("Error");//when user click . +
                return;
            }
        } else {
            if (stackOperater.peek() != '=') {
                if (operanOnCaculator.length() > 0) {
                    operand = Double.parseDouble(lbOnCaculator.getText());
                    stackOperand.push(operand);
                }
            } else {
                if (stackOperand.size() >= 2) { // if stack oprand size = 1 (user click a number then click = 
                    stackOperand.pop();
                }
                stackOperater.clear();
            }
        } // when user click = , then click + - * /
        if (stackOperand.size() == 3 && stackOperater.size() == 2) {
            try {
                double temp = caculate(stackOperand.get(1), stackOperand.get(2), stackOperater.get(1));
                stackOperand.pop();
                stackOperand.pop();
                stackOperand.push(temp);
                stackOperater.pop();
            } catch (Exception e) {
                lbOnCaculator.setText("Error");
                return;
            }

        }
        if (stackOperand.size() == 2 && stackOperater.size() == 1) {
            char c = stackOperater.get(0);
            if (c == '+' || c == '-') {
                stackOperater.clear();
                stackOperater.push(c);
                stackOperater.push('*');

            } else {
                try {
                    Result = caculate(stackOperand.get(0), stackOperand.get(1), stackOperater.get(0));
                    stackOperand.clear();
                    stackOperand.push(Result);
                    stackOperater.clear();
                    stackOperater.push('*');
                    lbOnCaculator.setText(Result + "");
                } catch (Exception e) {
                    lbOnCaculator.setText("Error");
                    return;
                }

            }
        } else {
            stackOperater.clear();
            stackOperater.push('*');
        }
        operanOnCaculator = "";
    }//GEN-LAST:event_btnMultipleActionPerformed

    private void btnDivideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDivideActionPerformed
        // TODO add your handling code here:
        if (stackOperater.isEmpty()) {
            try {
                operand = Double.parseDouble(lbOnCaculator.getText());
                stackOperand.push(operand);
            } catch (Exception e) {
                lbOnCaculator.setText("Error");//when user click . +
                return;
            }
        } else {
            if (stackOperater.peek() != '=') {
                if (operanOnCaculator.length() > 0) {
                    operand = Double.parseDouble(lbOnCaculator.getText());
                    stackOperand.push(operand);
                }
            } else {
                if (stackOperand.size() >= 2) { // if stack oprand size = 1 (user click a number then click = 
                    stackOperand.pop();
                }
                stackOperater.clear();
            }
        } // when user click = , then click + - * /
        if (stackOperand.size() == 3 && stackOperater.size() == 2) {
            try {
                double temp = caculate(stackOperand.get(1), stackOperand.get(2), stackOperater.get(1));
                stackOperand.pop();
                stackOperand.pop();
                stackOperand.push(temp);
                stackOperater.pop();
            } catch (Exception e) {
                lbOnCaculator.setText("Error");
                return;
            }
        }
        if (stackOperand.size() == 2 && stackOperater.size() == 1) {
            char c = stackOperater.get(0);
            if (c == '+' || c == '-') {
                stackOperater.clear();
                stackOperater.push(c);
                stackOperater.push('/');

            } else {
                try {
                    Result = caculate(stackOperand.get(0), stackOperand.get(1), stackOperater.get(0));
                    stackOperand.clear();
                    stackOperand.push(Result);
                    stackOperater.clear();
                    stackOperater.push('/');
                    lbOnCaculator.setText(Result + "");
                } catch (Exception e) {
                    lbOnCaculator.setText("Error");
                    return;
                }
            }
        } else {
            stackOperater.clear();
            stackOperater.push('/');
        }
        operanOnCaculator = "";
        System.out.println(stackOperand);
    }//GEN-LAST:event_btnDivideActionPerformed

    private void btnEqualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEqualActionPerformed
        // TODO add your handling code here:
        if (stackOperand.isEmpty() || stackOperater.isEmpty()) {//to out if two stack is empty
            if (operanOnCaculator.isEmpty()) {
                return;
            }
        }
        if (stackOperater.isEmpty() && !operanOnCaculator.isEmpty()) {// if user press a number and press '='
            operand = Double.parseDouble(operanOnCaculator);
            stackOperand.clear();
            stackOperand.push(operand);
        }
        if (!stackOperater.isEmpty() && !(stackOperater.peek() == '=')) {// if is equaling is not countine
            try {
                if (operanOnCaculator.length() == 0) {
                    operand = stackOperand.get(0);
                    System.out.println("toan");
                    stackOperand.push(operand);
                } else {
                    operand = Double.parseDouble(operanOnCaculator);
                    stackOperand.push(operand);
                }
            } catch (Exception e) {
                lbOnCaculator.setText("Error");
                return;
            }

        }

        if (stackOperand.size() == 3) {// if operater is mutilple or divide first, add or subtract sencond
            try {
                double temp = caculate(stackOperand.get(1), stackOperand.get(2), stackOperater.get(1));
                stackOperand.pop();
                stackOperand.pop();
                stackOperand.push(temp);
                stackOperater.pop();
            } catch (Exception e) {
                lbOnCaculator.setText("Error");
                return;
            }

        }
        if (stackOperand.size() == 2) {
            try {
                char c = stackOperater.get(0);
                double temp = stackOperand.get(1);
                Result = caculate(stackOperand.get(0), temp, stackOperater.get(0));
                stackOperand.clear();
                stackOperand.push(Result);
                stackOperand.push(temp);

                stackOperater.clear();
                stackOperater.push(c);
                lbOnCaculator.setText(Result + "");
            } catch (Exception e) {
                lbOnCaculator.setText("Error");
                return;
            }

        }

        stackOperater.push('=');
        operanOnCaculator = "";
    }//GEN-LAST:event_btnEqualActionPerformed

    private void btnSquareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSquareActionPerformed
        // TODO add your handling code here:
        try {
            operand = Double.parseDouble(lbOnCaculator.getText());
            if (operand >= 0) {
                Result = Math.sqrt(operand);
                lbOnCaculator.setText(String.valueOf(Result));
                stackOperand.clear();
                stackOperater.clear();
                operanOnCaculator = "";

            } else {
                lbOnCaculator.setText("Math Error");
            }
        } catch (Exception e) {
            lbOnCaculator.setText("Error");
        }

    }//GEN-LAST:event_btnSquareActionPerformed

    private void btnDeleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAllActionPerformed
        // TODO add your handling code here:
        stackOperand.clear();
        stackOperater.clear();
        operanOnCaculator = "";
        lbOnCaculator.setText("0");
    }//GEN-LAST:event_btnDeleteAllActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if (operanOnCaculator.length() == 0) {
            lbOnCaculator.setText("0");
            return;
        }
        StringBuffer sb = new StringBuffer(operanOnCaculator);
        sb.deleteCharAt(sb.length() - 1);
        operanOnCaculator = sb.toString();
        lbOnCaculator.setText(operanOnCaculator);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnDotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDotActionPerformed
        // TODO add your handling code here:
        if(operanOnCaculator.contains(".")){
            return;
        }
        operanOnCaculator += ".";
        lbOnCaculator.setText(operanOnCaculator);
        
    }//GEN-LAST:event_btnDotActionPerformed

    private void btnChangeAddorSubtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeAddorSubtractActionPerformed
        // TODO add your handling code here:
        if (stackOperater.isEmpty()) {
            operand = Double.parseDouble(lbOnCaculator.getText());
            operand = 0 - operand;
            operanOnCaculator = operand + "";
            lbOnCaculator.setText(operanOnCaculator);
        } else {
            operand = Double.parseDouble(lbOnCaculator.getText());
            operand = 0 - operand;

            if (stackOperater.peek() == '=') { // if user just click = , so stack operand have only 2 operand and result in index 0 of stackOperand
                stackOperand.set(0, operand);
                operanOnCaculator = operand + "";
                lbOnCaculator.setText(operanOnCaculator);
            } else {
                if (operanOnCaculator.length() != 0) { // if user just click a new number, operanOnCaculator's length is more than 0
                    operanOnCaculator = operand + "";
                    lbOnCaculator.setText(operanOnCaculator);
                }
            }
        }
        operanOnCaculator = "";
    }//GEN-LAST:event_btnChangeAddorSubtractActionPerformed

    private void btnMCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMCActionPerformed
        // TODO add your handling code here:
        Memory = 0;
        operanOnCaculator = "";
    }//GEN-LAST:event_btnMCActionPerformed

    private void btnMRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMRActionPerformed
        // TODO add your handling code here:
        lbOnCaculator.setText(Memory+"");
        operanOnCaculator = "";
    }//GEN-LAST:event_btnMRActionPerformed

    private void btnMAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMAddActionPerformed
        // TODO add your handling code here:
        try {
            operand = Double.parseDouble(lbOnCaculator.getText());
            Memory +=operand;
        } catch (Exception e) {
            lbOnCaculator.setText("Error");
        }
        
    }//GEN-LAST:event_btnMAddActionPerformed

    private void btnMSubtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMSubtractActionPerformed
        // TODO add your handling code here:
        try {
            operand = Double.parseDouble(lbOnCaculator.getText());
            Memory -=operand;
        } catch (Exception e) {
            lbOnCaculator.setText("Error");
        }
    }//GEN-LAST:event_btnMSubtractActionPerformed

    private void btnDevide100ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDevide100ActionPerformed
        // TODO add your handling code here:
        try {
            operand = Double.parseDouble(lbOnCaculator.getText());
            Result = operand / 100;
            lbOnCaculator.setText(String.valueOf(Result));
            stackOperand.clear();
            stackOperater.clear();
            operanOnCaculator = "";

        } catch (Exception e) {
            lbOnCaculator.setText("Error");
        }
    }//GEN-LAST:event_btnDevide100ActionPerformed

    private void btn1DivideXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn1DivideXActionPerformed
        // TODO add your handling code here:
        try {
            operand = Double.parseDouble(lbOnCaculator.getText());
            Result = 1 / operand;
            lbOnCaculator.setText(String.valueOf(Result));
            stackOperand.clear();
            stackOperater.clear();
            operanOnCaculator = "";

        } catch (Exception e) {
            lbOnCaculator.setText("Error");
        }
    }//GEN-LAST:event_btn1DivideXActionPerformed

    public double caculate(double x, double y, char c) {
        double result = y;
        switch (c) {
            case '+': {
                result = x + y;
            }
            break;
            case '-': {
                result = x - y;
            }
            break;
            case '*': {
                result = x * y;
            }
            break;
            case '/': {
                result = x / y;
            }
            break;
        }
        return result;
    }

    private void clearStack() {
        // clear stack for a new caculator
        if (!stackOperater.isEmpty()) {
            if (stackOperater.peek() == '=') {
                stackOperand.clear();
                stackOperater.clear();
                operanOnCaculator = "";
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Caculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Caculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Caculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Caculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
       
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Caculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn0;
    private javax.swing.JButton btn1;
    private javax.swing.JButton btn1DivideX;
    private javax.swing.JButton btn2;
    private javax.swing.JButton btn3;
    private javax.swing.JButton btn4;
    private javax.swing.JButton btn5;
    private javax.swing.JButton btn6;
    private javax.swing.JButton btn7;
    private javax.swing.JButton btn8;
    private javax.swing.JButton btn9;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnChangeAddorSubtract;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteAll;
    private javax.swing.JButton btnDevide100;
    private javax.swing.JButton btnDivide;
    private javax.swing.JButton btnDot;
    private javax.swing.JButton btnEqual;
    private javax.swing.JButton btnMAdd;
    private javax.swing.JButton btnMC;
    private javax.swing.JButton btnMR;
    private javax.swing.JButton btnMS;
    private javax.swing.JButton btnMSubtract;
    private javax.swing.JButton btnMultiple;
    private javax.swing.JButton btnSquare;
    private javax.swing.JButton btnSubtract;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton jButton6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lbOnCaculator;
    // End of variables declaration//GEN-END:variables

}
