package minhnn.ui;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import minhnn.daos.ItemDAO;
import minhnn.daos.SupplierDAO;
import minhnn.dtos.ItemDTO;
import minhnn.dtos.SupplierDTO;

/**
 *
 * @author FPT M7
 */
public class Main extends javax.swing.JFrame {

    private DefaultTableModel tblSuppliersModel = null;
    private DefaultTableModel tblItemsModel = null;
    boolean addNewSupplier = false;
    boolean addNewItem = false;

    public Main() {
        initComponents();
        this.setLocationRelativeTo(null);
        tblSuppliersModel = (DefaultTableModel) tblSuppliersView.getModel();
        tblItemsModel = (DefaultTableModel) tblItemsView.getModel();
        firstController();
    }

    public void firstController() {
        List<SupplierDTO> listSupplier = null;
        List<ItemDTO> listItem = null;
        SupplierDAO supplierDAO = new SupplierDAO();
        ItemDAO itemDAO = new ItemDAO();
        txtSupCode.setEditable(false);
        txtSupName.setEditable(false);
        txtSupAddress.setEditable(false);

        txtItemCode.setEditable(false);
        txtItemName.setEditable(false);
        cbbSupplier.setEnabled(false);
        txtUnit.setEditable(false);
        txtPrice.setEditable(false);
        cboxItemSupplying.setEnabled(false);

        try {
            listSupplier = supplierDAO.loadAllSupplier();
            if (listSupplier.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No record of suppliers found!");
            } else {
                tblSuppliersModel.setRowCount(0);
                for (SupplierDTO dto : listSupplier) {
                    tblSuppliersModel.addRow(dto.toVector());
                    cbbSupplier.addItem(dto.toString());
                }
            }

            listItem = itemDAO.loadAllItem();
            if (listItem.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No record of items found!");
            } else {
                tblItemsModel.setRowCount(0);
                for (ItemDTO dto : listItem) {
                    SupplierDTO supplier = supplierDAO.findBySupCode(dto.getSupCode());
                    tblItemsModel.addRow(dto.toVector(supplier));
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSuppliersView = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        txtSupCode = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtSupName = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtSupAddress = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        cboxSupColloborating = new javax.swing.JCheckBox();
        btnAddNewSupplier = new javax.swing.JButton();
        btnSaveSupplier = new javax.swing.JButton();
        btnDeleteSupplier = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblItemsView = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cbbSupplier = new javax.swing.JComboBox<>();
        txtUnit = new javax.swing.JTextField();
        txtItemName = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        cboxItemSupplying = new javax.swing.JCheckBox();
        txtItemCode = new javax.swing.JTextField();
        btnAddNewItem = new javax.swing.JButton();
        btnSaveItem = new javax.swing.JButton();
        btnDeleteItem = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Items Management Software");
        setPreferredSize(new java.awt.Dimension(1000, 500));
        setResizable(false);

        tblSuppliersView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Code", "Name", "Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblSuppliersView.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSuppliersViewMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblSuppliersViewMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tblSuppliersView);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Supplier's Detail", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jLabel12.setText("Name");

        jLabel13.setText("Code");

        jLabel14.setText("Address");

        jLabel15.setText("Colloborating");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSupCode, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSupAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboxSupColloborating)
                    .addComponent(txtSupName, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSupCode, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSupName, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSupAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboxSupColloborating, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(89, Short.MAX_VALUE))
        );

        btnAddNewSupplier.setText("Add New");
        btnAddNewSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewSupplierActionPerformed(evt);
            }
        });

        btnSaveSupplier.setText("Save");
        btnSaveSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveSupplierActionPerformed(evt);
            }
        });

        btnDeleteSupplier.setText("Delete");
        btnDeleteSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteSupplierActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAddNewSupplier)
                        .addGap(61, 61, 61)
                        .addComponent(btnSaveSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(btnDeleteSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddNewSupplier)
                            .addComponent(btnSaveSupplier)
                            .addComponent(btnDeleteSupplier))))
                .addContainerGap(85, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Suppliers", jPanel1);

        tblItemsView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Code", "Name", "Supplier", "Unit", "Price", "Supply"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblItemsView.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblItemsViewMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblItemsViewMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblItemsViewMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblItemsView);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Item's Detail", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(0, 51, 204))); // NOI18N

        jLabel1.setText("Item Code");

        jLabel2.setText("Item Name");

        jLabel3.setText("Supplier ");

        jLabel4.setText("Unit");

        jLabel5.setText("Price");

        jLabel6.setText("Supplying");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(61, 61, 61)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtItemName, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cbbSupplier, javax.swing.GroupLayout.Alignment.TRAILING, 0, 297, Short.MAX_VALUE)
                    .addComponent(txtUnit, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtPrice, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(cboxItemSupplying)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(txtItemCode))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txtItemCode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(cbbSupplier))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(txtUnit))
                .addGap(7, 7, 7)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboxItemSupplying))
                .addGap(15, 15, 15))
        );

        btnAddNewItem.setText("Add New");
        btnAddNewItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewItemActionPerformed(evt);
            }
        });

        btnSaveItem.setText("Save");
        btnSaveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveItemActionPerformed(evt);
            }
        });

        btnDeleteItem.setText("Delete");
        btnDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 114, Short.MAX_VALUE)
                        .addComponent(btnAddNewItem)
                        .addGap(45, 45, 45)
                        .addComponent(btnSaveItem)
                        .addGap(56, 56, 56)
                        .addComponent(btnDeleteItem)
                        .addGap(85, 85, 85))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddNewItem)
                    .addComponent(btnSaveItem)
                    .addComponent(btnDeleteItem))
                .addContainerGap(78, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Items", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(160, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblSuppliersViewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSuppliersViewMouseClicked
        // TODO add your handling code here:
        int row = tblSuppliersView.getSelectedRow();
        String supCode = (String) tblSuppliersView.getValueAt(row, 0);
        SupplierDTO dto = null;
        SupplierDAO dao = new SupplierDAO();
        txtSupCode.setEditable(false);
        txtSupName.setEditable(true);
        txtSupAddress.setEditable(true);
        addNewSupplier = false;

        try {
            dto = dao.findBySupCode(supCode);
            txtSupCode.setText(dto.getSupCode());
            txtSupName.setText(dto.getSupName());
            txtSupAddress.setText(dto.getAddress());
            cboxSupColloborating.setSelected(dto.isColloborating());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

    }//GEN-LAST:event_tblSuppliersViewMouseClicked

    private void tblSuppliersViewMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSuppliersViewMouseReleased
        // TODO add your handling code here:
        int row = tblSuppliersView.getSelectedRow();
        int col = tblSuppliersView.getSelectedColumn();
        tblSuppliersView.getCellEditor(row, col).cancelCellEditing();
    }//GEN-LAST:event_tblSuppliersViewMouseReleased

    private void btnAddNewSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewSupplierActionPerformed
        // TODO add your handling code here:
        addNewSupplier = true;
        txtSupCode.setText("");
        txtSupName.setText("");
        txtSupAddress.setText("");
        cboxSupColloborating.setSelected(false);
        txtSupCode.requestFocus();
        txtSupCode.setEditable(true);
        txtSupName.setEditable(true);
        txtSupAddress.setEditable(true);
    }//GEN-LAST:event_btnAddNewSupplierActionPerformed

    private void btnSaveSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveSupplierActionPerformed
        // TODO add your handling code here:
        String supCode = txtSupCode.getText();
        String supName = txtSupName.getText();
        String address = txtSupAddress.getText();
        boolean colloborating = cboxSupColloborating.isSelected() ? true : false;

        SupplierDTO dto = new SupplierDTO(supCode, supName, address, colloborating);
        SupplierDAO dao = new SupplierDAO();

        // Check dữ liệu
        String valid = "";
        if (supCode.isEmpty()) {
            valid += "Code may not be blank! \n";
        }
        if (supName.isEmpty()) {
            valid += "Name may not be blank! \n";
        }
        if (address.isEmpty()) {
            valid += "Address may not be blank! \n";
        }

        if (valid.equals("")) {
            if (addNewSupplier) {
                try {
                    boolean check = dao.insert(dto);
                    if (check) {
                        JOptionPane.showMessageDialog(this, "Add successful!");
                        tblSuppliersModel.addRow(dto.toVector());
                        this.cbbSupplier.addItem(dto.toString());
                    } else {
                        JOptionPane.showMessageDialog(this, "Add failed!");
                    }
                } catch (Exception e) {
                    if (e.getMessage().contains("duplicate")) {
                        JOptionPane.showMessageDialog(this, supCode + " already exists.");
                        addNewSupplier = true;
                        return;
                    } else {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }

            } else {
                try {
                    boolean check = dao.update(dto);
                    if (check) {
                        JOptionPane.showMessageDialog(this, "Update successful!");
                        int row = tblSuppliersView.getSelectedRow();
                        tblSuppliersModel.setValueAt(dto.getSupName(), row, 1);
                        tblSuppliersModel.setValueAt(dto.getAddress(), row, 2);
                        this.cbbSupplier.removeItemAt(row);
                        this.cbbSupplier.addItem(dto.toString());
                        /*
                    List<SupplierDTO> listSupplier = null;
                    SupplierDAO supplierDAO = new SupplierDAO();
                    listSupplier = supplierDAO.loadAllSupplier();
                    cbSupplier.removeAllItems();
                    for (SupplierDTO dto : listSupplier) {
                    cbSupplier.addItem(dto.toString());
                    }
                         */

                    } else {
                        JOptionPane.showMessageDialog(this, "Update failed!");
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }

            }
            addNewSupplier = false;
        } else {
            JOptionPane.showMessageDialog(this, valid);

        }
    }//GEN-LAST:event_btnSaveSupplierActionPerformed

    private void btnDeleteSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteSupplierActionPerformed
        // TODO add your handling code here:
        try {
            int row = tblSuppliersView.getSelectedRow();
            String supCode = (String) tblSuppliersView.getValueAt(row, 0);
            SupplierDAO supDAO = new SupplierDAO();
            ItemDAO itemDAO = new ItemDAO();

            try {
                if (itemDAO.checkSupplier(supCode)) {
                    JOptionPane.showMessageDialog(this, "You must remove all items of supplier before remove supplier!");
                } else {
                    int confirm = JOptionPane.showConfirmDialog(this, "Do you want to remove this supplier?", "Remove!", JOptionPane.OK_CANCEL_OPTION);
                    if (confirm == JOptionPane.OK_OPTION) {
                        boolean check = supDAO.delete(supCode);
                        if (check) {
                            JOptionPane.showMessageDialog(this, "Remove successful!");
                            tblSuppliersModel.removeRow(row);
                            this.cbbSupplier.removeItemAt(row);
                        } else {
                            JOptionPane.showMessageDialog(this, "Remove failed!");
                        }
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Please choose record on the table!");

        }
    }//GEN-LAST:event_btnDeleteSupplierActionPerformed

    private void tblItemsViewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblItemsViewMouseClicked
        // TODO add your handling code here:
        int row = tblItemsView.getSelectedRow();
        String itemCode = (String) tblItemsView.getValueAt(row, 0);
        ItemDTO dto = null;
        ItemDAO dao = new ItemDAO();
        SupplierDAO supplierDAO = new SupplierDAO();
        SupplierDTO supplierDTO = null;
        txtItemCode.setEditable(false);
        txtItemName.setEditable(true);
        cbbSupplier.setEnabled(true);
        txtUnit.setEditable(true);
        txtPrice.setEditable(true);
        cboxItemSupplying.setEnabled(true);
        addNewItem = false;

        try {
            dto = dao.findByItemCode(itemCode);
            txtItemCode.setText(dto.getItemCode());
            txtItemName.setText(dto.getItemName());
            supplierDTO = supplierDAO.findBySupCode(dto.getSupCode());
            cbbSupplier.setSelectedItem(supplierDTO.toString());
            txtUnit.setText(dto.getUnit());
            txtPrice.setText(dto.getPrice() + "");
            cboxItemSupplying.setSelected(dto.isSupplying());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

        /*    String itemName = (String) tblItemsView.getValueAt(row, 1);
        String supCode = (String) tblItemsView.getValueAt(row, 2);
        String unit = (String) tblItemsView.getValueAt(row, 3);
        int price = Integer.parseInt(tblItemsView.getValueAt(row, 4).toString().trim());
        String supply = (String) tblItemsView.getValueAt(row, 5);

        txtItemCode.setText(itemCode);
        txtItemName.setText(itemName);
        cbSupplier.setSelectedItem(supCode);
        txtUnit.setText(unit);
        txtPrice.setText(price+"");
        cboxItemSupplying.setSelected(supply.equalsIgnoreCase("false")? false : true); */

    }//GEN-LAST:event_tblItemsViewMouseClicked

    private void tblItemsViewMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblItemsViewMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tblItemsViewMousePressed

    private void tblItemsViewMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblItemsViewMouseReleased
        // TODO add your handling code here:
        int row = tblItemsView.getSelectedRow();
        int col = tblItemsView.getSelectedColumn();
        tblItemsView.getCellEditor(row, col).cancelCellEditing();
    }//GEN-LAST:event_tblItemsViewMouseReleased

    private void btnAddNewItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewItemActionPerformed
        // TODO add your handling code here:
        addNewItem = true;
        txtItemCode.setText("");
        txtItemCode.requestFocus();
        txtItemName.setText("");
        txtUnit.setText("");
        txtPrice.setText("");
        txtItemCode.setEditable(true);
        txtItemName.setEditable(true);
        cbbSupplier.setEnabled(true);
        txtUnit.setEditable(true);
        txtPrice.setEditable(true);
        cboxItemSupplying.setEnabled(true);
        cbbSupplier.setSelectedIndex(0);
        cboxItemSupplying.setSelected(false);
    }//GEN-LAST:event_btnAddNewItemActionPerformed

    private void btnSaveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveItemActionPerformed
        // TODO add your handling code here:
        try {
            String itemCode = txtItemCode.getText();
            String itemName = txtItemName.getText();
            String[] output = ((String) cbbSupplier.getSelectedItem()).split("-");
            String supCode = output[0].trim();
            String unit = txtUnit.getText();
            int price = Integer.parseInt(txtPrice.getText().trim());
            boolean supplying = cboxItemSupplying.isSelected() ? true : false;

            ItemDTO dto = new ItemDTO(itemCode, itemName, supCode, unit, price, supplying);
            ItemDAO dao = new ItemDAO();
            SupplierDTO supplier = null;
            SupplierDAO supplierDAO = new SupplierDAO();

            String valid = "";
            if (itemCode.isEmpty()) {
                valid += "Code may not be blank! \n";
            }
            if (itemName.isEmpty()) {
                valid += "Name may not be blank! \n";
            }
            /*    if (supCode.isEmpty()){
            valid += "Supplier may not be blank! \n";
        } */
            if (unit.isEmpty()) {
                valid += "Unit may not be blank! \n";
            }

            if (price <= 0) {
                valid += "Price must be > 0! ";
            }

            if (valid.equals("")) {
                if (addNewItem) {
                    try {
                        boolean check = dao.insert(dto);
                        if (check) {
                            JOptionPane.showMessageDialog(this, "Add successful!");
                            supplier = supplierDAO.findBySupCode(dto.getSupCode());
                            tblItemsModel.addRow(dto.toVector(supplier));
                        } else {
                            JOptionPane.showMessageDialog(this, "Add failed!");
                        }
                    } catch (Exception e) {
                        if (e.getMessage().contains("duplicate")) {
                            JOptionPane.showMessageDialog(this, itemCode + " already exists.");
                            addNewItem = true;
                            return;
                        } else {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    }
                } else {
                    try {
                        boolean check = dao.update(dto);
                        if (check) {
                            JOptionPane.showMessageDialog(this, "Update successful!");
                            int row = tblItemsView.getSelectedRow();
                            tblItemsModel.setValueAt(dto.getItemName(), row, 1);
                            supplier = supplierDAO.findBySupCode(dto.getSupCode());
                            tblItemsModel.setValueAt(supplier.toString(), row, 2);
                            tblItemsModel.setValueAt(dto.getUnit(), row, 3);
                            tblItemsModel.setValueAt(dto.getPrice(), row, 4);
                            tblItemsModel.setValueAt(dto.isSupplying() ? "true" : "false", row, 5);
                        } else {
                            JOptionPane.showMessageDialog(this, "Update failed!");
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }

                }
                addNewItem = false;
            } else {
                JOptionPane.showMessageDialog(this, valid);
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Please input correct data!");
        }
    }//GEN-LAST:event_btnSaveItemActionPerformed

    private void btnDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteItemActionPerformed
        // TODO add your handling code here:
        try {
            int row = tblItemsView.getSelectedRow();
            String itemCode = (String) tblItemsView.getValueAt(row, 0);
            ItemDAO dao = new ItemDAO();

            try {
                int confirm = JOptionPane.showConfirmDialog(this, "Do you want to remove this item?", "Remove!", JOptionPane.OK_CANCEL_OPTION);
                if (confirm == JOptionPane.OK_OPTION) {
                    boolean check = dao.delete(itemCode);
                    if (check) {
                        JOptionPane.showMessageDialog(this, "Remove successful!");
                        tblItemsModel.removeRow(row);
                    } else {
                        JOptionPane.showMessageDialog(this, "Remove failed!");
                    }

                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Please choose record on the table!");

        }

    }//GEN-LAST:event_btnDeleteItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewItem;
    private javax.swing.JButton btnAddNewSupplier;
    private javax.swing.JButton btnDeleteItem;
    private javax.swing.JButton btnDeleteSupplier;
    private javax.swing.JButton btnSaveItem;
    private javax.swing.JButton btnSaveSupplier;
    private javax.swing.JComboBox<String> cbbSupplier;
    private javax.swing.JCheckBox cboxItemSupplying;
    private javax.swing.JCheckBox cboxSupColloborating;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tblItemsView;
    private javax.swing.JTable tblSuppliersView;
    private javax.swing.JTextField txtItemCode;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtSupAddress;
    private javax.swing.JTextField txtSupCode;
    private javax.swing.JTextField txtSupName;
    private javax.swing.JTextField txtUnit;
    // End of variables declaration//GEN-END:variables
}
